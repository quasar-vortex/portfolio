// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum FileType {
  IMAGE
  VIDEO
}

model File {
  id           String    @id @default(uuid())
  originalName String    @db.VarChar(100)
  size         Int
  url          String    @unique @db.VarChar(200)
  objectKey    String    @unique @db.VarChar(36)
  uploader     User      @relation("file-uploader", fields: [userId], references: [id])
  fileType     FileType  @default(IMAGE)
  dateUploaded DateTime  @default(now())
  dateUpdated  DateTime? @updatedAt
  isActive     Boolean   @default(true)
  User         User[]    @relation("avatar-file")
  Post         Post[]    @relation()
  Project      Project[]
  userId       String
}

// Not implemented but for future
enum Role {
  ADMIN
  USER
}

model User {
  id             String    @id @default(uuid())
  firstName      String    @db.VarChar(20)
  lastName       String    @db.VarChar(20)
  email          String    @unique @db.VarChar(50)
  passwordHash   String    @db.VarChar(255)
  registeredDate DateTime  @default(now())
  lastLoginDate  DateTime?
  refreshToken   String?   @unique
  role           Role      @default(USER)
  bio            String?   @db.VarChar(250)
  avatarFile     File?     @relation("avatar-file", fields: [avatarFileId], references: [id], onDelete: Cascade)
  avatarFileId   String?
  isActive       Boolean   @default(true)
  PostAuthor     Post[]    @relation("post-author")
  ProjectAuthor  Project[] @relation("project-author")
  File           File[]    @relation("file-uploader")
  PostUpdater    Post[]    @relation("post-updater")
  ProjectUpdater Project[] @relation("project-updater")
  Tag            Tag[]
}

model Tag {
  id         String       @id @default(uuid())
  name       String       @unique @db.VarChar(50)
  author     User         @relation(fields: [authorId], references: [id])
  PostTag    PostTag[]
  ProjectTag ProjectTag[]
  authorId   String
  isActive   Boolean      @default(true)
}

model Post {
  id           String    @id @default(uuid())
  title        String    @unique @db.VarChar(100)
  slug         String    @unique @db.VarChar(150)
  excerpt      String    @db.VarChar(250)
  content      String    @db.Text
  isPublished  Boolean   @default(false)
  isFeatured   Boolean   @default(false)
  isActive     Boolean   @default(true)
  publishDate  DateTime?
  createdDate  DateTime  @default(now())
  updatedDate  DateTime? @updatedAt
  coverImage   File?     @relation(fields: [coverImageId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  coverImageId String?
  author       User      @relation("post-author", fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  updatedBy    User?     @relation("post-updater", fields: [updatedById], references: [id])
  updatedById  String?
  PostTag      PostTag[]

  @@index([isFeatured])
  @@index([isPublished])
  @@index([slug])
}

model PostTag {
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  String

  @@id([tagId, postId])
}

model Project {
  id           String       @id @default(uuid())
  title        String       @unique @db.VarChar(100)
  slug         String       @unique @db.VarChar(150)
  description  String       @db.VarChar(500)
  coverImage   File?        @relation(fields: [coverImageId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  coverImageId String?
  isPublished  Boolean      @default(false)
  isFeatured   Boolean      @default(false)
  publishDate  DateTime?
  createdDate  DateTime     @default(now())
  updatedDate  DateTime?    @updatedAt
  isActive     Boolean      @default(true)
  author       User         @relation("project-author", fields: [authorId], references: [id])
  authorId     String
  codeUrl      String?      @db.VarChar(150)
  liveUrl      String?      @db.VarChar(150)
  updatedBy    User?        @relation("project-updater", fields: [updatedById], references: [id])
  updatedById  String?
  ProjectTag   ProjectTag[]

  @@index([isFeatured])
  @@index([isPublished])
  @@index([slug])
}

model ProjectTag {
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String

  @@id([projectId, tagId])
}
